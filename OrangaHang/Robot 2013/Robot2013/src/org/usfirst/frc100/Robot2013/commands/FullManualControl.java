// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc100.Robot2013.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc100.Robot2013.Robot;

/**
 *
 */
public class  FullManualControl extends Command {
    public SendableChooser controlChooser;

    public FullManualControl() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	requires(Robot.driveTrain);
	requires(Robot.climber);
	requires(Robot.shooter);
        requires(Robot.tower);
        requires(Robot.frisbeeBelt);
        requires(Robot.pneumatics);
        
        controlChooser = new SendableChooser();
        controlChooser.addDefault("Climber", "climber");
        controlChooser.addObject("Shooter", "shooter");
        SmartDashboard.putData("controlChooser", controlChooser);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        //normal tankdrive
        Robot.driveTrain.tankDrive(Robot.oi.getDriverLeft().getY(), Robot.oi.getDriverRight().getY());
        
        //manipulator left = elevator, manipulator right = tower
        if (controlChooser.getSelected().equals("climber")){
            Robot.climber.manualControl(Robot.oi.getManipulator().getY());
            Robot.tower.manualControl(Robot.oi.getManipulator().getThrottle()/3);
        }
        
        //manipulator leftY = front motor, manipulator leftX = back motor, manipulator right=frisbee belt
        if (controlChooser.getSelected().equals("shooter")){
            Robot.shooter.manualControl(Robot.oi.getManipulator().getY(),Robot.oi.getManipulator().getX());
            Robot.frisbeeBelt.manualControl(Robot.oi.getManipulator().getThrottle());
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

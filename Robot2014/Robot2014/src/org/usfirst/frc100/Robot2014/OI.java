// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2014;

import org.usfirst.frc100.Robot2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driverLeft;
    public JoystickButton shiftButton;
    public Joystick driverRight;
    public JoystickButton tiltToShootLowButton;
    public JoystickButton tiltToIntakeButton;
    public JoystickButton tiltToShootTrussButton;
    public JoystickButton tiltToShootHighButton;
    public JoystickButton expelButton;
    public JoystickButton shootButton;
    public JoystickButton intakeButton;
    public JoystickButton armButton;
    public Joystick manipulator;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipulator = new Joystick(3);
        
        armButton = new JoystickButton(manipulator, 8);
        armButton.whileHeld(new ArmShooter());
        intakeButton = new JoystickButton(manipulator, 7);
        intakeButton.whileHeld(new RunIntakeIn());
        shootButton = new JoystickButton(manipulator, 6);
        shootButton.whenPressed(new TriggerShootReload());
        expelButton = new JoystickButton(manipulator, 5);
        expelButton.whileHeld(new RunIntakeOut());
        tiltToShootHighButton = new JoystickButton(manipulator, 4);
        tiltToShootHighButton.whenPressed(new TiltToShootHigh());
        tiltToShootTrussButton = new JoystickButton(manipulator, 3);
        tiltToShootTrussButton.whenPressed(new TiltToShootTruss());
        tiltToIntakeButton = new JoystickButton(manipulator, 2);
        tiltToIntakeButton.whenPressed(new TiltToIntake());
        tiltToShootLowButton = new JoystickButton(manipulator, 1);
        tiltToShootLowButton.whenPressed(new TiltToShootLow());
        driverRight = new Joystick(2);
        
        shiftButton = new JoystickButton(driverRight, 1);
        shiftButton.whileHeld(new ShiftLow());
        driverLeft = new Joystick(1);
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("ShiftLow", new ShiftLow());

        SmartDashboard.putData("TiltToIntake", new TiltToIntake());

        SmartDashboard.putData("TiltToShootTruss", new TiltToShootTruss());

        SmartDashboard.putData("TiltToShootLow", new TiltToShootLow());

        SmartDashboard.putData("TiltToShootHigh", new TiltToShootHigh());

        SmartDashboard.putData("TriggerShootReload", new TriggerShootReload());

        SmartDashboard.putData("RunIntakeIn", new RunIntakeIn());

        SmartDashboard.putData("RunIntakeOut", new RunIntakeOut());

        SmartDashboard.putData("AutoDriveStraight", new AutoDriveStraight());

        SmartDashboard.putData("Catch", new Catch());

        SmartDashboard.putData("ArmShooter", new ArmShooter());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverLeft() {
        return driverLeft;
    }

    public Joystick getDriverRight() {
        return driverRight;
    }

    public Joystick getManipulator() {
        return manipulator;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


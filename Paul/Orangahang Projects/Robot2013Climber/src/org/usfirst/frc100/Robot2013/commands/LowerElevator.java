// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc100.Robot2013.Robot;
/**
 *
 */
public class  LowerElevator extends Command {
    boolean isFinished=false;
    public LowerElevator() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.climber);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //only lower elevator partway to get from level 2 to level 3 of pyramid
        if (Robot.climber.getLevel()!=2){
            Robot.climber.lowerElevator();
        }
        else {
            Robot.climber.lowerElevatorPartway();
        }
        if (Robot.climber.getLowerLimit()){
            isFinished=true;
        }
        if (Robot.climber.getLevel()==2&&Robot.climber.getPartwayLimit()){
            isFinished=true;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isFinished;
    }
    // Called once after isFinished returns true
    protected void end() {
        //this is only in LowerElevator, NOT RaiseElevator
        Robot.climber.nextLevel();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder climberClimberEncoder;
    public static SpeedController climberClimberMotor;
    public static DigitalInput climberTopClimberSwitch;
    public static DigitalInput climberBottomClimberSwitch;
    public static DigitalInput climberRightFixedHookMetalSensor;
    public static DigitalInput climberLeftFixedHookMetalSensor;
    public static DigitalInput climberRightMovingHookMetalSensor;
    public static DigitalInput climberLeftMovingHookMetalSensor;
    public static DigitalInput climberPoleLimitSwitch;
    public static Solenoid climberEmergencyBrake;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        climberClimberEncoder = new Encoder(1, 9, 1, 10, false, EncodingType.k4X);
	LiveWindow.addSensor("Climber", "ClimberEncoder", climberClimberEncoder);
        climberClimberEncoder.setDistancePerPulse(1.0);
        climberClimberEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        climberClimberEncoder.start();
        climberClimberMotor = new Talon(1, 1);
	LiveWindow.addActuator("Climber", "ClimberMotor", (Talon) climberClimberMotor);
        
        climberTopClimberSwitch = new DigitalInput(1, 1);
	LiveWindow.addSensor("Climber", "TopClimberSwitch", climberTopClimberSwitch);
        
        climberBottomClimberSwitch = new DigitalInput(1, 2);
	LiveWindow.addSensor("Climber", "BottomClimberSwitch", climberBottomClimberSwitch);
        
        climberRightFixedHookMetalSensor = new DigitalInput(1, 11);
	LiveWindow.addSensor("Climber", "RightFixedHookMetalSensor", climberRightFixedHookMetalSensor);
        
        climberLeftFixedHookMetalSensor = new DigitalInput(1, 3);
	LiveWindow.addSensor("Climber", "LeftFixedHookMetalSensor", climberLeftFixedHookMetalSensor);
        
        climberRightMovingHookMetalSensor = new DigitalInput(1, 12);
	LiveWindow.addSensor("Climber", "RightMovingHookMetalSensor", climberRightMovingHookMetalSensor);
        
        climberLeftMovingHookMetalSensor = new DigitalInput(1, 4);
	LiveWindow.addSensor("Climber", "LeftMovingHookMetalSensor", climberLeftMovingHookMetalSensor);
        
        climberPoleLimitSwitch = new DigitalInput(1, 5);
	LiveWindow.addSensor("Climber", "PoleLimitSwitch", climberPoleLimitSwitch);
        
        climberEmergencyBrake = new Solenoid(1, 5);
	LiveWindow.addActuator("Climber", "EmergencyBrake", climberEmergencyBrake);
        
    }
}

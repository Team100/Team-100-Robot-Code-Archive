// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc100.Robot2013.Robot;
/**
 *
 */
public class  TeleopDrive extends Command {
    public SendableChooser driveChooser;
    public TeleopDrive() {
        requires(Robot.driveTrain);
        driveChooser = new SendableChooser();
        driveChooser.addDefault("Tank Drive", "tank");
        driveChooser.addObject("One Joystick Arcade Drive", "arcade1");
        driveChooser.addObject("Two Joystick Arcade Drive", "arcade2");
        driveChooser.addObject("None", "none");
        SmartDashboard.putData("Drive Mode", driveChooser);
    }

    protected void initialize() {
    }

    protected void execute() {
        if (driveChooser.getSelected().equals("tank")){
            Robot.driveTrain.tankDrive(Robot.oi.getDriverLeft().getY(), Robot.oi.getDriverRight().getY());
        }
        if (driveChooser.getSelected().equals("arcade1")){
            Robot.driveTrain.arcadedrive(Robot.oi.getDriverLeft().getY(),Robot.oi.getDriverLeft().getX());
        }
        if (driveChooser.getSelected().equals("arcade2")){
            Robot.driveTrain.arcadedrive(Robot.oi.getDriverLeft().getY(), Robot.oi.getDriverRight().getX());
        }
        if (driveChooser.getSelected().equals("none")){
            Robot.driveTrain.tankDrive(0, 0);
        }
    }

    protected boolean isFinished() {
        return false;
    }

    protected void end() {
    }

    protected void interrupted() {
    }
}
// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static Gyro driveTrainGyro;
    public static DoubleSolenoid driveTrainHighGear;
    public static DoubleSolenoid driveTrainLowGear;
    public static SpeedController driveTrainLeft;
    public static SpeedController driveTrainRight;
    public static RobotDrive driveTrainRobotDrive;
    public static AnalogChannel driveTrainBatteryVoltage;
    public static SpeedController frisbeeBeltBeltMotor;
    public static DigitalInput frisbeeBeltBottomLimitSwitch;
    public static Encoder climberClimberEncoder;
    public static SpeedController climberClimberMotor;
    public static DigitalInput climberTopClimberSwitch;
    public static DigitalInput climberBottomClimberSwitch;
    public static DigitalInput climberRightFixedHookMetalSensor;
    public static DigitalInput climberLeftFixedHookMetalSensor;
    public static DigitalInput climberRightMovingHookMetalSensor;
    public static DigitalInput climberLeftMovingHookMetalSensor;
    public static DigitalInput climberPoleLimitSwitch;
    public static Solenoid climberEmergencyBrake;
    public static SpeedController shooterShooterMotorFront;
    public static SpeedController shooterShooterMotorRear;
    public static DigitalInput shooterShooterEncoderFront;
    public static DigitalInput shooterShooterEncoderRear;
    public static Relay shooterCameraLight;
    public static AnalogChannel towerTowerAnglePot;
    public static SpeedController towerTowerTilter;
    public static AnalogChannel towerRangefinder;
    public static Compressor pneumaticsCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Counter shooterEncoder;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainLeftEncoder.start();
        driveTrainRightEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainRightEncoder.start();
        driveTrainGyro = new Gyro(1, 1);
	LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(1.25);
        driveTrainHighGear = new DoubleSolenoid(1, 3, 4);      
	
        
        driveTrainLowGear = new DoubleSolenoid(1, 1, 2);      
	
        
        driveTrainLeft = new Talon(1, 3);
	LiveWindow.addActuator("DriveTrain", "Left", (Talon) driveTrainLeft);
        
        driveTrainRight = new Talon(1, 5);
	LiveWindow.addActuator("DriveTrain", "Right", (Talon) driveTrainRight);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeft, driveTrainRight);
	
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        
        driveTrainBatteryVoltage = new AnalogChannel(1, 8);
	LiveWindow.addSensor("DriveTrain", "BatteryVoltage", driveTrainBatteryVoltage);
        
        frisbeeBeltBeltMotor = new Talon(1, 7);
	LiveWindow.addActuator("FrisbeeBelt", "BeltMotor", (Talon) frisbeeBeltBeltMotor);
        
        frisbeeBeltBottomLimitSwitch = new DigitalInput(1, 13);
	LiveWindow.addSensor("FrisbeeBelt", "BottomLimitSwitch ", frisbeeBeltBottomLimitSwitch);
        
        climberClimberEncoder = new Encoder(1, 9, 1, 10, false, EncodingType.k4X);
	LiveWindow.addSensor("Climber", "ClimberEncoder", climberClimberEncoder);
        climberClimberEncoder.setDistancePerPulse(1.0);
        climberClimberEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        climberClimberEncoder.start();
        climberClimberMotor = new Talon(1, 1);
	LiveWindow.addActuator("Climber", "ClimberMotor", (Talon) climberClimberMotor);
        
        climberTopClimberSwitch = new DigitalInput(1, 1);
	LiveWindow.addSensor("Climber", "TopClimberSwitch", climberTopClimberSwitch);
        
        climberBottomClimberSwitch = new DigitalInput(1, 2);
	LiveWindow.addSensor("Climber", "BottomClimberSwitch", climberBottomClimberSwitch);
        
        climberRightFixedHookMetalSensor = new DigitalInput(1, 11);
	LiveWindow.addSensor("Climber", "RightFixedHookMetalSensor", climberRightFixedHookMetalSensor);
        
        climberLeftFixedHookMetalSensor = new DigitalInput(2, 1);
	LiveWindow.addSensor("Climber", "LeftFixedHookMetalSensor", climberLeftFixedHookMetalSensor);
        
        climberRightMovingHookMetalSensor = new DigitalInput(1, 12);
	LiveWindow.addSensor("Climber", "RightMovingHookMetalSensor", climberRightMovingHookMetalSensor);
        
        climberLeftMovingHookMetalSensor = new DigitalInput(2, 2);
	LiveWindow.addSensor("Climber", "LeftMovingHookMetalSensor", climberLeftMovingHookMetalSensor);
        
        climberPoleLimitSwitch = new DigitalInput(2, 4);
	LiveWindow.addSensor("Climber", "PoleLimitSwitch", climberPoleLimitSwitch);
        
        climberEmergencyBrake = new Solenoid(1, 5);
	LiveWindow.addActuator("Climber", "EmergencyBrake", climberEmergencyBrake);
        
        shooterShooterMotorFront = new Talon(1, 6);
	LiveWindow.addActuator("Shooter", "ShooterMotorFront", (Talon) shooterShooterMotorFront);
        
        shooterShooterMotorRear = new Talon(1, 8);
	LiveWindow.addActuator("Shooter", "ShooterMotorRear", (Talon) shooterShooterMotorRear);
        
        shooterShooterEncoderFront = new DigitalInput(1, 7);
	LiveWindow.addSensor("Shooter", "ShooterEncoderFront", shooterShooterEncoderFront);
        
        shooterShooterEncoderRear = new DigitalInput(1, 8);
	LiveWindow.addSensor("Shooter", "ShooterEncoderRear ", shooterShooterEncoderRear);
        
        shooterCameraLight = new Relay(1, 2);
	LiveWindow.addActuator("Shooter", "CameraLight", shooterCameraLight);
        
        towerTowerAnglePot = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Tower", "TowerAnglePot", towerTowerAnglePot);
        
        towerTowerTilter = new Talon(1, 2);
	LiveWindow.addActuator("Tower", "TowerTilter", (Talon) towerTowerTilter);
        
        towerRangefinder = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Tower", "Rangefinder", towerRangefinder);
        
        pneumaticsCompressor = new Compressor(1, 14, 1, 1);
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterEncoder=new Counter(shooterShooterEncoder);
    }
}

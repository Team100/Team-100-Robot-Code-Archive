// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc100.Robot2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static Accelerometer driveTrainAccelerometer;
    public static SpeedController driveTrainLeftA;
    public static Gyro driveTrainGyro;
    public static SpeedController driveTrainLeftB;
    public static SpeedController driveTrainRightA;
    public static SpeedController driveTrainRightB;
    public static SpeedController intakeIntakeA;
    public static SpeedController intakeIntakeB;
    public static Encoder climberClimberEncoder;
    public static SpeedController climberClimberMotorA;
    public static SpeedController climberClimberMotorB;
    public static Encoder shooterEncoder;
    public static SpeedController shooterShooterMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainLeftEncoder.start();
        driveTrainRightEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainRightEncoder.start();
        driveTrainAccelerometer = new Accelerometer(1, 1);
	LiveWindow.addSensor("DriveTrain", "Accelerometer", driveTrainAccelerometer);
        driveTrainAccelerometer.setSensitivity(1.0);
        driveTrainAccelerometer.setZero(2.5);
        driveTrainLeftA = new Jaguar(1, 3);
	LiveWindow.addActuator("DriveTrain", "LeftA", (Jaguar) driveTrainLeftA);
        
        driveTrainGyro = new Gyro(1, 2);
	LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(1.25);
        driveTrainLeftB = new Jaguar(1, 4);
	LiveWindow.addActuator("DriveTrain", "LeftB", (Jaguar) driveTrainLeftB);
        
        driveTrainRightA = new Jaguar(1, 5);
	LiveWindow.addActuator("DriveTrain", "RightA", (Jaguar) driveTrainRightA);
        
        driveTrainRightB = new Jaguar(1, 6);
	LiveWindow.addActuator("DriveTrain", "RightB", (Jaguar) driveTrainRightB);
        
        intakeIntakeA = new Jaguar(1, 7);
	LiveWindow.addActuator("Intake", "IntakeA", (Jaguar) intakeIntakeA);
        
        intakeIntakeB = new Jaguar(1, 8);
	LiveWindow.addActuator("Intake", "IntakeB", (Jaguar) intakeIntakeB);
        
        climberClimberEncoder = new Encoder(1, 9, 1, 10, false, EncodingType.k4X);
	LiveWindow.addSensor("Climber", "ClimberEncoder", climberClimberEncoder);
        climberClimberEncoder.setDistancePerPulse(1.0);
        climberClimberEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        climberClimberEncoder.start();
        climberClimberMotorA = new Talon(1, 1);
	LiveWindow.addActuator("Climber", "ClimberMotorA", (Talon) climberClimberMotorA);
        
        climberClimberMotorB = new Talon(1, 2);
	LiveWindow.addActuator("Climber", "ClimberMotorB", (Talon) climberClimberMotorB);
        
        shooterEncoder = new Encoder(1, 7, 1, 8, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Encoder", shooterEncoder);
        shooterEncoder.setDistancePerPulse(1.0);
        shooterEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterEncoder.start();
        shooterShooterMotor = new Jaguar(1, 9);
	LiveWindow.addActuator("Shooter", "ShooterMotor", (Jaguar) shooterShooterMotor);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}

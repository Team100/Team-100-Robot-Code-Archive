// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013.subsystems;
import org.usfirst.frc100.Robot2013.RobotMap;
import org.usfirst.frc100.Robot2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    Accelerometer accelerometer = RobotMap.driveTrainAccelerometer;
    SpeedController leftA = RobotMap.driveTrainLeftA;
    Gyro gyro = RobotMap.driveTrainGyro;
    SpeedController leftB = RobotMap.driveTrainLeftB;
    SpeedController rightA = RobotMap.driveTrainRightA;
    SpeedController rightB = RobotMap.driveTrainRightB;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double desiredHeading = 0.0;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new UseTankDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void tankDrive(double x, double y) {
        if (Math.abs(x) >= 0.95 && Math.abs(y) >= 0.95) {
            driveStraight( (int) (x / Math.abs(x)), gyro.getAngle());
        } else {
            leftA.set(x);
            leftB.set(x);
            rightA.set(y);
            rightB.set(y);
        }
    }
    
    public void driveStraight(int i, double heading) {
        desiredHeading = convertAngle((int)heading);
        leftA.set(.8 * i);
        leftB.set(.8 * i);
        rightA.set((.8 * i) + (convertAngle((int)gyro.getAngle()) - desiredHeading));
        rightB.set((.8 * i) + (convertAngle((int)gyro.getAngle()) - desiredHeading));
    }
    
    public void turn90(int i) {
        int heading = convertAngle((int)desiredHeading + (90 * i));
        leftA.set((convertAngle((int)gyro.getAngle()) - heading) / -90.0);
        leftB.set((convertAngle((int)gyro.getAngle()) - heading) / -90.0);
        rightA.set((convertAngle((int)gyro.getAngle()) - heading) / 90.0);
        rightB.set((convertAngle((int)gyro.getAngle()) - heading) / 90.0);
    }
    
    public int convertAngle(int i) {
        int modifiedHeading;
        if (i > 180) {
            modifiedHeading = -(360 - i);
        } else {
            modifiedHeading = i;
        }
        return modifiedHeading;
    }
    
    public void setHeading(int angle) {
        desiredHeading = angle;
    }
    
    public void resetSensors() {
        leftEncoder.reset();
        rightEncoder.reset();
        gyro.reset(); 
    }
    
    public void startSensors() {
        leftEncoder.start();
        rightEncoder.start();
    }
    
    public Gyro getGyro() {
        return gyro;
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013.subsystems;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc100.Robot2013.RobotMap;
/**
 *
 */
public class Climber extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder climberEncoder = RobotMap.climberClimberEncoder;
    SpeedController climberMotor = RobotMap.climberClimberMotor;
    DigitalInput topClimberSwitch = RobotMap.climberTopClimberSwitch;
    DigitalInput bottomClimberSwitch = RobotMap.climberBottomClimberSwitch;
    DigitalInput rightFixedHookMetalSensor = RobotMap.climberRightFixedHookMetalSensor;
    DigitalInput leftFixedHookMetalSensor = RobotMap.climberLeftFixedHookMetalSensor;
    DigitalInput rightMovingHookMetalSensor = RobotMap.climberRightMovingHookMetalSensor;
    DigitalInput leftMovingHookMetalSensor = RobotMap.climberLeftMovingHookMetalSensor;
    DigitalInput poleLimitSwitch = RobotMap.climberPoleLimitSwitch;
    Solenoid emergencyBrake = RobotMap.climberEmergencyBrake;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //Make these preferences!
    boolean homeUp=true;
    double elevatorSpeed=1;
    double homingSpeed=.2;
    private double homingReverseSpeed=.1;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void manualControl(double d){
        climberMotor.set(0);
        if (topClimberSwitch.get()&&d<0){
            climberMotor.set(d);
        }
        if (bottomClimberSwitch.get()&&d>0){
            climberMotor.set(d);
        }
        if(!topClimberSwitch.get()&&!bottomClimberSwitch.get()){
            climberMotor.set(d);
        }
    }
    
    public void raiseElevator(){
        if (!getUpperLimit()){
            climberMotor.set(elevatorSpeed);
        }
        else {
            climberMotor.set(0);
        }
    }
    
    public void lowerElevator(){
        if (!getLowerLimit()){
            climberMotor.set(-elevatorSpeed);
        }
        else {
            climberMotor.set(0);
        }
    }
    
    public boolean getLowerLimit(){
        return bottomClimberSwitch.get();
    }
    
    public boolean getUpperLimit(){
        return topClimberSwitch.get();
    }
    
    public void homingSequence() {
        if (homeUp){
            while (!getUpperLimit()){
                climberMotor.set(homingSpeed);
            }
            while (getUpperLimit()){
                climberMotor.set(-homingReverseSpeed);
            }
            climberEncoder.reset();
        }
        else{
            while (!getLowerLimit()){
                climberMotor.set(-homingSpeed);
            }
            while (getLowerLimit()){
                climberMotor.set(homingReverseSpeed);
            }
            climberEncoder.reset();
        }
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc100.Robot2013.subsystems;
import org.usfirst.frc100.Robot2013.RobotMap;
import org.usfirst.frc100.Robot2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Tower extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel towerAnglePot = RobotMap.towerTowerAnglePot;
    SpeedController towerTilter = RobotMap.towerTowerTilter;
    AnalogChannel rangefinder = RobotMap.towerRangefinder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //make the preference(s)!!!!!!
    double tilterSpeed=.2;
      
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

      public void tiltElevatorForward(){
        if (!getTiltForwardLimit()){
            towerTilter.set(tilterSpeed);
        }
        else {
            towerTilter.set(0);
        }
    }
    
    public void tiltElevatorBack(){
        if (!getTiltBackLimit()){
            towerTilter.set(-tilterSpeed);
        }
        else {
            towerTilter.set(0);
        }
    }
    
      public boolean getTiltForwardLimit() {
        //Change this number!
        return (towerAnglePot.getValue()>60);
    }
    
    public boolean getTiltBackLimit() {
        //Change this number!
        return (towerAnglePot.getValue()<30);
    }
}
